public class Solution {
    public boolean wordPattern(String pattern, String str) {
        if(str==null || pattern == null){
            return false;
        }
        String[] strArr=str.split(" ");
        if(strArr.length != pattern.length()){
            return false;
        }
        
        HashMap<Character,List<Integer>> map=new HashMap<Character,List<Integer>>();
        for(int i=0;i<pattern.length();i++){
            char c=pattern.charAt(i);
            if(map.containsKey(c)){
                List<Integer> list=map.get(c);
                list.add(i);
                map.put(c,list);
            }else{
                List<Integer> list=new ArrayList<Integer>();
                list.add(i);
                map.put(c,list);
            }
            
        }
        
        int sz=map.size();
        Set<String> set=new HashSet<String>();
        for(Map.Entry<Character,List<Integer>> e : map.entrySet()){
            /*if(e.getValue().size()<=1){
                continue;
            }*/
            
            String tmp=strArr[e.getValue().get(0)];
            set.add(tmp);
            for(int i : e.getValue()){
                if(!tmp.equals(strArr[i])){
                    return false;
                }
            }
        }
        
        if(sz!=set.size()){
            return false;
        }
        
        return true;
    }
}

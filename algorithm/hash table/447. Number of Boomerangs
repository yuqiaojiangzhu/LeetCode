public class Solution {
    public int numberOfBoomerangs(int[][] points) {
        int len=points.length;
        //HashMap<Integer,HashMap<Integer,Integer>> map=new HashMap<Integer,HashMap<Integer,Integer>>();
        
        int count=0;    //总计
        for(int i=0;i<len;i++){
            HashMap<Double,Integer> distance=new HashMap<Double,Integer>();
            for(int j=0;j<len;j++){
                if(j==i){
                    continue;
                }
                //HashMap<Integer,Integer> distance=new HashMap<Integer,Integer>();
                double dis=getDistance(points,i,j);
                distance.put(dis,distance.containsKey(dis)?distance.get(dis)+1:1);
            }
            for(Map.Entry<Double,Integer> e : distance.entrySet()){
                count+=getCount(e.getValue());
            }
        }
        return count;
    }
    
    public double getDistance(int[][] points,int i,int j){     //获取i到j点之间距离，从0开始点下标
        int res=0;
        for(int z=0;z<2;z++){
            res+=Math.pow((points[i][z]-points[j][z]),2);
        }
        return Math.sqrt(res);
    }
    
    public int getCount(int num){   //和i距离为n的点个数为num，求i距离为n的点能出几对组合
       if(num==0 || num==1){
           return 0;
       }
       return num*(num-1);
    }
}
